{"version":3,"sources":["config/Api.ts","Services/AuthorityService.ts","Services/UserService.ts","Contexts/ActiveUserContext.tsx","components/pages/LoginPage/LoginPage.tsx","config/Authorities.ts","Router/PrivateRoute.tsx","logo1.png","components/pages/HomePage.tsx","components/pages/UserPage/UserTable.tsx","components/molecules/UserForm/UserForm.tsx","components/pages/UserPage/UserPage.tsx","Services/UserProfileService.ts","components/molecules/UserProfileForm/UserProfileForm.tsx","components/pages/UserProfilePage/UserProfilePage.tsx","Contexts/UserProfileOverviewContext.tsx","components/molecules/PaginationBar/PaginationBar.tsx","components/organisms/Overview/Overview.tsx","components/molecules/UserProfileSort/UserProfileSort.tsx","components/pages/UserProfilePage/UserProfileOverviewPage.tsx","Router/Router.tsx","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","process","interceptors","request","use","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","authoritySet","Set","AuthorityService","initAuthoritySet","user","JSON","parse","roles","forEach","role","authorities","authority","add","name","hasAuthority","has","hasAuthorities","element","hasAnyAuthority","clearAuthorities","clear","UserService","getUser","async","data","get","userID","updateUser","put","id","addUser","post","then","res","getAllUsers","deleteUser","delete","USER_DATA_LOCAL_STORAGE_KEY","TOKEN_LOCAL_STORAGE_KEY","noContextProviderFound","Error","defaultContextValue","login","logout","setActiveUser","loadActiveUser","checkRole","ActiveUserContext","createContext","ActiveUserContextProvider","children","setUser","useState","storeUser","loadSavedUserData","navigate","useNavigate","updatedUser","setItem","stringify","resetAuthorization","useEffect","Provider","value","email","password","console","log","authorization","finally","roleToCheck","some","validationSchema","Yup","shape","Login","btnstyle","margin","useContext","Grid","Paper","elevation","style","padding","height","width","initialValues","enableReinitialize","onSubmit","values","toLowerCase","catch","status","alert","validateOnChange","isInitialValid","props","handleSubmit","TextField","label","placeholder","fullWidth","required","autoFocus","onChange","handleChange","onBlur","handleBlur","errors","type","Button","color","variant","Typography","Link","href","PrivateRoute","requiredAuths","RouteComponent","activeUserContext","tokenString","replace","jwt","exp","Date","now","isLoggedIn","to","length","USER_MODIFY","onClick","HomePage","Box","display","alignItems","justifyContent","flexDirection","src","logo","filter","className","alt","UserTable","users","setUsers","map","Card","sx","minWidth","CardContent","firstName","lastName","CardActions","size","handleEdit","handleDelete","UserForm","submitActionHandler","formik","useFormik","userProfile","object","string","min","max","paddingTop","paddingRight","Boolean","touched","marginTop","marginRight","disabled","dirty","isValid","UserPage","userId","useParams","undefined","UserProfileService","getUserProfile","getAllUserProfiles","offset","limit","sort","addUserProfile","updateUserProfile","UserProfileSchema","username","address","birthday","nullable","test","date","setHours","today","profilePicture","url","UserProfileForm","isDisabled","year","getFullYear","month","String","getMonth","padStart","day","getDate","formatDate","payload","submitHandler","helperText","deleteHandler","UserProfilePage","currentUserProfile","setCurrentUserProfile","contextDefaultValues","setSort","currentPage","setCurrentPage","setPageInfo","pageInfo","totalPages","totalElements","pageable","pageNumber","pageSize","sorted","unsorted","empty","paged","unpaged","content","number","numberOfElements","first","last","UserProfileOverviewContext","UserProfileOverviewContextProvider","PaginationBar","Pagination","count","page","event","Overview","UserProfileSort","selectedValue","setSelectedValue","Select","labelId","target","MenuItem","Homepage","Router","path","LoginPage","UserProfileOverviewPage","USER_DEACTIVATE","USER_CREATE","USER_READ","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.85a1f5ef.chunk.js","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\n\n/**\n * isDev returns a boolean if the application is running in development-mode.\n */\nconst isDev = (): boolean => !process.env.NODE_ENV || process.env.NODE_ENV === \"development\";\n\n/**\n * Create an Axios instance for the api.\n */\nconst createAPI = (): AxiosInstance => {\n  return axios.create({ baseURL: process.env.REACT_APP_BASEURL });\n};\n\n/**\n * api constant is the axios-instance used for all requests to the rest-api.\n */\nconst api: AxiosInstance = createAPI();\n\n/**\n * Set the Authorization header on each request equal to the token which\n * is stored inside the localStorage if a user is authenticated.\n */\napi.interceptors.request.use(\n  (request) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      request.headers.Authorization = token;\n    }\n    return request;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Log outgoing requests if the environment is in development-mode\n */\napi.interceptors.request.use((request) => {\n  if (isDev() && request.method) {\n    const info = `REQUEST ${request.method.toLocaleUpperCase()} ${request.url}`;\n    if (request.method.toLocaleLowerCase() === \"get\") {\n      console.debug(info);\n    } else {\n      console.debug(info, request.data);\n    }\n  }\n  return request;\n}, Promise.reject);\n\n/**\n * Log incoming responses if the environment is in development-mode\n */\napi.interceptors.response.use(\n  (response) => {\n    if (isDev() && response.config && response.config.method) {\n      console.debug(\n        `RESPONSE ${response.config.method.toLocaleUpperCase()} ${response.config.url}`,\n        response.data\n      );\n    }\n    return response;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default api;\n","import authorities from '../config/Authorities';\nimport { Authority } from '../types/models/Authority.model';\nimport { Role } from '../types/models/Role.model';\n\nconst authoritySet = new Set<authorities>();\n\nconst AuthorityService = {\n  initAuthoritySet: (\n    user = JSON.parse(localStorage.getItem('user') || '{}')\n  ) => {\n    const roles = user && user.roles ? user.roles : [];\n    roles.forEach((role: Role) => {\n      role.authorities.forEach((authority: Authority) => {\n        authoritySet.add(authority.name);\n      });\n    });\n  },\n  hasAuthority: (authority: authorities) => {\n    AuthorityService.initAuthoritySet();\n\n    return authoritySet.has(authority);\n  },\n  hasAuthorities: (authorities: authorities[]) => {\n    AuthorityService.initAuthoritySet();\n\n    for (const element of authorities) {\n      if (!authoritySet.has(element)) {\n        return false;\n      }\n    }\n    return true;\n  },\n  hasAnyAuthority: (authorities: authorities[]) => {\n    for (const element of authorities) {\n      if (authoritySet.has(element)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  clearAuthorities: (): void => {\n    authoritySet.clear();\n  },\n};\n\nexport default AuthorityService;\n","import api from '../config/Api';\nimport { User } from '../types/models/User.model';\n\nconst UserService = {\n  getUser: async (userID: string): Promise<User> => {\n    const { data } = await api.get<User>(`/user/${userID}`);\n    return data;\n  },\n\n  updateUser: (user: User) => {\n    return api.put(`/user/${user.id}`, user);\n  },\n\n  addUser: async (user: User) => {\n    return api.post('/user/registerUser', user).then((res) => {\n      return res.data;\n    });\n  },\n\n  getAllUsers: () => {\n    return api.get(`/user`);\n  },\n\n  deleteUser: (id: string) => {\n    return api.delete(`/user/${id}`);\n  },\n};\n\nexport default UserService;\n","import { createContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../config/Api\";\nimport roles from \"../config/Roles\";\nimport AuthorityService from \"../Services/AuthorityService\";\nimport UserService from \"../Services/UserService\";\nimport { User } from \"../types/models/User.model\";\nimport { Nullable } from \"../types/Nullable\";\n\n/**\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\n * activeUser gets stored.\n */\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\n\n/**\n * ActiveUserContextType defines the provided values\n */\nexport type ActiveUserContextType = {\n  user: Nullable<User>;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  setActiveUser: (user: User) => void;\n  loadActiveUser: () => void;\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\n};\n\n/**\n * noContextProviderFound is a method that throws an error and is used\n * inside the defaultContextValue\n */\nconst noContextProviderFound = () => {\n  throw new Error(\"No provider for the ActiveUserContext found\");\n};\n\n/**\n * defaultContextValue defines the default values for the ActiveUserContext.\n */\nconst defaultContextValue: ActiveUserContextType = {\n  user: null,\n  login: noContextProviderFound,\n  logout: noContextProviderFound,\n  setActiveUser: noContextProviderFound,\n  loadActiveUser: noContextProviderFound,\n  checkRole: noContextProviderFound,\n};\n\n/**\n * ActiveUserContext has the purpose of providing the currently active user\n * as well as related values, modifiers and related operations such as login\n * and logout.\n */\nconst ActiveUserContext =\n  createContext<ActiveUserContextType>(defaultContextValue);\nexport default ActiveUserContext;\n\n/**\n * Props for the ActiveUserContextProvider Component\n */\ntype ActiveUserContextProviderProps = {\n  children: React.ReactNode;\n};\n\n/**\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\n * to all child-components.\n * @param children consists of all the elements that are located inside the\n */\nexport const ActiveUserContextProvider = ({\n  children,\n}: ActiveUserContextProviderProps) => {\n  /**\n   * Try to load the user data that is stored inside the LocalStorage.\n   * If non is present, null will be returned.\n   */\n  const loadSavedUserData = (): Nullable<User> => {\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\n    if (storeUser === null) return null;\n    return JSON.parse(storeUser);\n  };\n\n  // The following line defines the user state which is holding the user\n  // data inside this context.\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\n  const navigate = useNavigate();\n  /**\n   * Update the user that is provided by the ActiveUserContext\n   * @param updatedUser\n   */\n  const setActiveUser = (updatedUser: User) => {\n    setUser(updatedUser);\n    localStorage.setItem(\n      USER_DATA_LOCAL_STORAGE_KEY,\n      JSON.stringify(updatedUser)\n    );\n  };\n\n  /**\n   * Remove all user and authorization related data from the localStorage\n   */\n  const resetAuthorization = () => {\n    // Reset the stored data inside the AuthorityService.\n    AuthorityService.clearAuthorities();\n    // Clear all data from the localStorage.\n    localStorage.clear();\n    // Set the user, which is stored inside the context to null.\n    setUser(null);\n  };\n\n  /**\n   * Logout the currently active user by resetting the stored user data\n   * and redirecting to the LoginPage.\n   */\n  const logout = () => {\n    // If no token is saved inside the local storage clear the localStorage directly\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\n      resetAuthorization();\n      return;\n    }\n    // If a token is present send a logout-request and clear the localStorage afterwards\n    api.get(\"/logout\").finally(resetAuthorization);\n    //navigate to login page\n    navigate(\"/login\");\n  };\n\n  /**\n   * Login with the provided credentials. If successful the current user gets\n   * updated and stored inside the context. Also the JWT-Token for further\n   * request based authentication is stored inside the localStorage.\n   * @param email\n   * @param password\n   */\n  const login = async (email: string, password: string) => {\n    await api.post(\"user/login\", { email, password }).then((response: any) => {\n      console.log(response.headers.authorization);\n      localStorage.setItem(\n        TOKEN_LOCAL_STORAGE_KEY,\n        response.headers.authorization\n      );\n      setActiveUser(response.data);\n      return true;\n    });\n    return false;\n  };\n\n  /**\n   * Request the user data for the currently active user from the api\n   * and save it to the context-state.\n   */\n  const loadActiveUser = () => {\n    return user\n      ? UserService.getUser(user.id).then((res: any) => {\n          setActiveUser(res);\n        })\n      : null;\n  };\n\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\n  }\n\n  /**\n   * Try to load the user-object from the localStorage if present.\n   * This is done automatically on the first render of this component.\n   */\n  useEffect(() => {\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\n    if (token !== null) {\n      loadActiveUser();\n    }\n  }, []);\n\n  /**\n   * If the user state is updated and the user is not equal to null,\n   * the data used in the AuthorityService as well as the data stored inside\n   * the localStorage will be updated with the new user-data.\n   */\n  useEffect(() => {\n    if (user !== null) {\n      AuthorityService.initAuthoritySet(user);\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\n    }\n  }, [user]);\n\n  return (\n    <div>\n      <ActiveUserContext.Provider\n        value={{\n          user,\n          setActiveUser,\n          login,\n          logout,\n          loadActiveUser,\n          checkRole: activeUserHasRole,\n        }}\n      >\n        {children}\n      </ActiveUserContext.Provider>\n    </div>\n  );\n};\n","import {\n  Paper,\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  Link,\n} from '@mui/material';\nimport React, { useContext } from 'react';\n\nimport { Form, Formik } from 'formik';\nimport {useNavigate} from 'react-router-dom';\nimport * as Yup from 'yup';\nimport ActiveUserContext from '../../../Contexts/ActiveUserContext';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string(),\n  password: Yup.string(),\n});\n\nconst Login = () => {\n  const paperStyle = {\n    padding: 20,\n    height: '70vh',\n    width: 280,\n    margin: '20px auto',\n  };\n  const btnstyle = { margin: '8px 0' };\n  const navigate = useNavigate();\n  const { login } = useContext(ActiveUserContext);\n\n  const handleSubmit = (values: { email: string; password: string }) => {\n    login(values.email.toLowerCase(), values.password)\n      .then(() => {\n        console.log(\"navigate\", values);\n\n        navigate('/userprofile/me');\n      })\n      .catch((error) => {\n        if (\n          (typeof error.response !== 'undefined' &&\n            error.response.status === 401) ||\n          error.response.status === 403\n        ) {\n          alert('invalid login');\n        } else {\n          alert('login Error');\n        }\n      });\n  };\n  return (\n    <Grid>\n      <Paper elevation={10} style={paperStyle}>\n        <Grid>\n          <h2>Sign In</h2>\n          <p>Default login:</p>\n          <p>email: admin@example.com</p>\n          <p>pw: 1234</p>\n        </Grid>\n\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n          enableReinitialize\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n          validateOnChange\n          isInitialValid\n        >\n          {(props) => (\n            <Form onSubmit={props.handleSubmit}>\n              <TextField\n                label='email'\n                id='email'\n                data-cy=\"email\"\n                placeholder='Enter username'\n                fullWidth\n                required\n                autoFocus\n                onChange={props.handleChange}\n                onBlur={props.handleBlur}\n                value={props.values.email}\n              />\n              {props.errors.email && (\n                <div id='feedback'>{props.errors.email}</div>\n              )}\n\n              <TextField\n                id='password'\n                label='password'\n                data-cy=\"password\"\n                placeholder='Enter password'\n                type='password'\n                fullWidth\n                required\n                onChange={props.handleChange}\n                onBlur={props.handleBlur}\n                value={props.values.password}\n              />\n              {props.errors.password && (\n                <div id='feedback'>{props.errors.password}</div>\n              )}\n\n              <Button\n                type='submit'\n                data-cy=\"submit-login\"\n                color='primary'\n                variant='contained'\n                style={btnstyle}\n                fullWidth\n              >\n                Sign in\n              </Button>\n            </Form>\n          )}\n        </Formik>\n        <Typography>\n          <Link href='#'>Forgot password ?</Link>\n        </Typography>\n        <Typography>\n          {' '}\n          Do you have an account ?<Link href='#'>Sign Up</Link>\n        </Typography>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default Login;\n","enum authorities {\n/*\n  add your authorities here. E.g:\n*/\n  USER_CREATE = \"USER_CREATE\",\n  USER_READ = \"USER_READ\",\n  USER_DEACTIVATE = \"USER_DEACTIVATE\",\n  DEFAULT = \"DEFAULT\",\n  USER_MODIFY = \"USER_MODIFY\",\n  USER_DELETE = \"USER_DELETE\",\n}\n\nexport default authorities;\n","import React, {useContext} from 'react';\nimport {Navigate, useNavigate} from 'react-router-dom';\nimport * as jwt from 'jsonwebtoken';\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\nimport AuthorityService from '../Services/AuthorityService';\nimport {Button} from '@mui/material';\nimport authorities from '../config/Authorities';\n\ninterface Props {\n    element: React.ReactElement;\n    requiredAuths: authorities[];\n}\n\ntype JWTType = {\n    iss: string;\n    exp: number;\n};\n\nconst PrivateRoute: React.FC<Props> = ({\n                                           requiredAuths: requiredAuths,\n                                           element: RouteComponent,\n                                       }) => {\n    const navigate = useNavigate();\n\n    const activeUserContext = useContext(ActiveUserContext);\n    /**\n     * isLoggedIn checks if the token, which is saved inside the localStorage,\n     * exists, isn't expired yet and has been issued by the correct issuer.\n     * If all of the above is true the user is seen as logged in.\n     */\n    const isLoggedIn = () => {\n        let tokenString = localStorage.getItem('token');\n        if (!tokenString) {\n            console.error('no token found');\n            return false;\n        }\n        tokenString = tokenString.replace('Bearer ', '');\n        const token: JWTType = jwt.decode(tokenString) as JWTType;\n        // Check if token does not exist or doesn't have an expiration claim or is expired.\n        if (!token || !token.exp || token.exp < Date.now() / 1000) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * If the user is not logged in call activeUserContext.logout, which destroys\n     * all locally saved user data and redirects to /login.\n     */\n    if (!isLoggedIn()) {\n        activeUserContext.logout();\n        return <Navigate to='/login' replace={true}/>;\n    }\n    /**\n     * Check if the active user has at least 1 of the needed authorities.\n     * If no authorities are needed true is returned.\n     */\n    let hasNeededAuthorities =\n        requiredAuths.length === 0 ||\n        requiredAuths.some(AuthorityService.hasAuthority);\n\n    /**\n     * If the user doesn't possess the needed authorities Redirect the user to\n     * /unauthorized\n     */\n    if (!hasNeededAuthorities) {\n        return <Navigate to='/unauthorized' replace={true}/>;\n    }\n\n    if (AuthorityService.hasAuthority(authorities.USER_MODIFY)) {\n        return (<div>\n            <Button onClick={activeUserContext.logout}>Logout</Button>\n            <Button onClick={() => navigate('/userprofile/all')}>Admin Overview</Button>\n            {RouteComponent}\n        </div>)\n    }\n\n    // All checks passed\n    return (\n        //Pagelayout puts the Navigation, Menu etc. around the component\n        <div>\n            <Button onClick={activeUserContext.logout}>Logout</Button>\n            {RouteComponent}\n        </div>\n    );\n};\nexport default PrivateRoute;\n","export default __webpack_public_path__ + \"static/media/logo1.a04327d3.png\";","import { Box, flexbox } from '@mui/system';\nimport logo from '../../logo1.png';\n\nexport default function HomePage() {\n  return (\n    <Box\n      display='flex'\n      alignItems='center'\n      justifyContent='center'\n      flexDirection={'column'}\n    >\n      <h1>Welcome to the Homepage</h1>\n      <img\n        src={logo}\n        style={{ filter: 'invert(100%)' }}\n        className='App-logo'\n        alt='logo'\n      />\n    </Box>\n  );\n}\n","import Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport { useEffect, useState } from 'react';\nimport { User } from '../../../types/models/User.model';\nimport UserService from '../../../Services/UserService';\nimport { useNavigate } from 'react-router-dom';\n\nconst UserTable = () => {\n  const navigate = useNavigate();\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    UserService.getAllUsers().then((data) => {\n      setUsers(data.data);\n    });\n  }, []);\n\n  const handleAdd = () => {\n    navigate('../useredit/');\n  };\n\n  const handleEdit = (id: string) => {\n    navigate('../useredit/' + id);\n  };\n\n  const handleDelete = (id: string) => {\n    UserService.deleteUser(id);\n  };\n\n  return (\n    <>\n      {users.map((user) => (\n        <div key={user.id}>\n          <Card sx={{ minWidth: 275 }}>\n            <CardContent>\n              {user.firstName} {user.lastName} {user.email}\n              <CardActions>\n                <Button\n                  size='small'\n                  color='primary'\n                  variant='contained'\n                  onClick={() => handleEdit(user.id)}\n                >\n                  Edit\n                </Button>\n                <Button\n                  size='small'\n                  color='error'\n                  variant='contained'\n                  onClick={() => handleDelete(user.id)}\n                >\n                  Delete\n                </Button>\n              </CardActions>\n            </CardContent>\n          </Card>\n        </div>\n      ))}\n      <Button\n        size='small'\n        color='success'\n        variant='contained'\n        onClick={handleAdd}\n      >\n        Add\n      </Button>\n    </>\n  );\n};\n\nexport default UserTable;\n","import { useFormik } from 'formik';\nimport { User } from '../../../types/models/User.model';\nimport { Box, Button, TextField } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { object, string } from 'yup';\n\ninterface UserProps {\n  user: User;\n  submitActionHandler: (values: User) => void;\n}\n\nconst UserForm = ({ user, submitActionHandler }: UserProps) => {\n  const navigate = useNavigate();\n\n  const formik = useFormik({\n    initialValues: {\n      id: user.id,\n      lastName: user ? user.lastName : '',\n      firstName: user ? user.firstName : '',\n      email: user ? user.email : '',\n      userProfile: user ? user.userProfile: { id : ''},\n      roles: user ? user.roles : [],\n    },\n    validationSchema: object({\n      firstName: string().required().min(2).max(50),\n      lastName: string().required().min(2).max(50),\n      email: string().required().email(),\n    }),\n    onSubmit: (values: User) => {\n      submitActionHandler(values);\n    },\n    enableReinitialize: true,\n  });\n\n  return (\n\n      <form onSubmit={formik.handleSubmit}>\n        <Box sx={{ paddingTop: '15px' }}>\n          <TextField\n            id='firstName'\n            label='Firstname'\n            variant='outlined'\n            sx={{ paddingRight: '10px' }}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            error={Boolean(formik.touched.firstName && formik.errors.firstName)}\n            value={formik.values.firstName}\n          />\n          {formik.errors.firstName && formik.touched.firstName ? (\n            <div style={{ color: 'red' }}>{formik.errors.firstName}</div>\n          ) : null}\n          <TextField\n            id='lastName'\n            label='Lastname'\n            variant='outlined'\n            sx={{ paddingRight: '10px' }}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            error={Boolean(formik.touched.lastName && formik.errors.lastName)}\n            value={formik.values.lastName}\n          />\n          {formik.errors.lastName && formik.touched.lastName ? (\n            <div style={{ color: 'red' }}>{formik.errors.lastName}</div>\n          ) : null}\n          <TextField\n            id='email'\n            label='E-Mail'\n            variant='outlined'\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            error={Boolean(formik.touched.email && formik.errors.email)}\n            value={formik.values.email}\n          />\n\n          {formik.errors.email && formik.touched.email ? (\n            <div style={{ color: 'red' }}>{formik.errors.email}</div>\n          ) : null}\n        </Box>\n        <div>\n          <Button\n            sx={{ marginTop: '15px', marginRight: '10px' }}\n            variant='contained'\n            color='success'\n            type='submit'\n            disabled={!(formik.dirty && formik.isValid)}\n          >\n            {user.id && 'Save'}\n            {!user.id && 'Add'}\n          </Button>\n          <Button\n            sx={{ marginTop: '15px' }}\n            variant='contained'\n            color='error'\n            onClick={() => {\n              navigate('/users');\n            }}\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n  );\n};\n\nexport default UserForm;\n","import { useNavigate, useParams } from 'react-router-dom';\nimport { User } from '../../../types/models/User.model';\nimport UserService from '../../../Services/UserService';\nimport UserForm from '../../molecules/UserForm/UserForm';\nimport { useEffect, useState } from 'react';\n\nconst UserPage = () => {\n  const navigate = useNavigate();\n  const { userId } = useParams();\n  const [user, setUser] = useState<User>({\n    userProfile: {id: \"\"},\n    id: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    roles: []\n  });\n\n  useEffect(() => {\n    return () => {\n      if (userId) {\n        UserService.getUser(userId).then((res) => {\n          return setUser(res);\n        });\n      }\n    };\n  }, [userId]);\n\n  const submitActionHandler = (values: User) => {\n    if (userId !== undefined) {\n      UserService.updateUser(values).then(() => {\n        navigate('../users');\n      });\n    } else {\n      UserService.addUser(values).then(() => {\n        navigate('/users');\n      });\n    }\n  };\n\n  return <UserForm user={user} submitActionHandler={submitActionHandler} />;\n};\nexport default UserPage;\n","import api from '../config/Api';\n\nimport {UserProfile} from \"../types/models/UserProfile.model\";\nimport {Page} from \"../types/models/Page.model\";\n\nconst UserProfileService = {\n    getUserProfile: async (id : string): Promise<UserProfile> => {\n        const response = await api.get<UserProfile>(`/userprofile/${id}`);\n        return response.data;\n    },\n    getAllUserProfiles: async (offset: number, limit: number, sort?: string): Promise<Page<UserProfile>> => {\n        sort = sort === \"\" ? \"\" : \"&sort=\" + sort;\n        const response = await api.get<Page<UserProfile>>(`/userprofile?limit=${limit}&offset=${offset}${sort}`);\n        return response.data;\n    },\n    addUserProfile: async (userProfile: UserProfile, id: string) => {\n       const response = await api.post(`/userprofile/${id}`, userProfile);\n       return response.data;\n    },\n\n    deleteUser: (id: string) => {\n        return api.delete(`/userprofile/${id}`);\n    },\n\n    getAllUsers: () => {\n        return api.get(`/userprofile`);\n    },\n\n    updateUserProfile: (userProfile: UserProfile) => {\n        return api.put(`/userprofile/${userProfile.id}`, userProfile);\n    },\n};\n\nexport default UserProfileService;\n","import React, {useContext} from 'react';\nimport {UserProfile} from \"../../../types/models/UserProfile.model\";\nimport {useFormik} from \"formik\";\nimport * as Yup from 'yup';\nimport {Box} from \"@mui/system\";\nimport {Button, TextField} from \"@mui/material\";\nimport UserProfileService from \"../../../Services/UserProfileService\";\nimport ActiveUserContext from \"../../../Contexts/ActiveUserContext\";\n\ninterface UserProfileProps {\n    userProfile: UserProfile | undefined | null;\n    isDisabled: boolean;\n}\n\n\nconst UserProfileSchema = Yup.object().shape({\n    username: Yup.string().required(\"required\").min(1, \"min. 1 letter\").max(50, \"max. 50 letters\"),\n    address: Yup.string().min(3, \"min. 3 letters\").max(50, \"max. 50 letters\"),\n    birthday: Yup.string().nullable()\n        .test(\"Check Max Date\", \"Date is invalid.\", (value) => {\n            const date = value ? new Date(value) : new Date();\n            date.setHours(0, 0, 0, 0);\n            let today = new Date();\n            today.setHours(0, 0, 0, 0);\n\n            return value ? today >= date : true;\n        }),\n    profilePicture: Yup.string()\n        .url(\"Invalid URL format.\")\n});\n\n\n\nconst UserProfileForm = ({userProfile, isDisabled} : UserProfileProps) => {\n\n    const {user} = useContext(ActiveUserContext)\n\n    const formatDate = ((date : Date) => {\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, \"0\");\n        const day = String(date.getDate()).padStart(2, \"0\");\n        return `${year}-${month}-${day}`;\n    });\n\n\n\n\n    const submitHandler = (values: UserProfile) => {\n        try {\n            const payload ={\n                ...values,\n                birthday : values.birthday ? new Date(values.birthday) : undefined,\n            }\n            if(values.username) {\n                UserProfileService.updateUserProfile(payload)\n                    .then(() => {\n                        console.log(\"UserProfile Updated\");\n                    })\n            } else if (user) {\n                UserProfileService.addUserProfile(payload, user?.id)\n                    .then(() => {\n                        console.log(\"UserProfile Created\")\n                    })\n            }\n        }catch (error) {\n            console.log(error);\n        }\n    };\n\n    const deleteHandler = (id : string | undefined) => {\n        try {\n            if (id !== undefined) {\n                UserProfileService.deleteUser(id)\n                    .then(() => {\n                        console.log(\"UserProfile Deleted\");\n                    })\n            }\n        }catch(error){\n            console.log(error);\n        }\n    }\n\n\n    const formik = useFormik({\n        initialValues : {\n            id : userProfile ? userProfile.id : '',\n            username: userProfile ? userProfile.username : '',\n            address: userProfile ? userProfile.address : '',\n            birthday: userProfile && userProfile.birthday ? formatDate(new Date(userProfile.birthday)) : '',\n            profilePicture: userProfile ? userProfile.profilePicture: '',\n        },\n        validationSchema: UserProfileSchema,\n        onSubmit : (values: UserProfile) => {\n            console.log(values);\n            submitHandler(values);\n        },\n        enableReinitialize: true,\n        validateOnChange: true\n    });\n\n\n\n    return (\n        <div>\n            <form onSubmit={formik.handleSubmit} >\n                <Box sx={{ paddingTop: '30px' }}>\n                    <TextField\n                        id=\"profilePicture\"\n                        name=\"profilePicture\"\n                        label=\"Profilpicture URL\"\n                        variant=\"outlined\"\n                        value={formik.values.profilePicture}\n                        onChange={formik.handleChange}\n                        error={formik.touched.profilePicture && Boolean(formik.errors.profilePicture)}\n                        helperText={formik.errors.profilePicture}\n                        disabled={isDisabled}\n                    />\n                    <TextField\n                        required\n                        id=\"username\"\n                        name=\"username\"\n                        label=\"Username\"\n                        variant=\"outlined\"\n                        value={formik.values.username}\n                        onChange={formik.handleChange}\n                        error={formik.touched.username && Boolean(formik.errors.username)}\n                        helperText={formik.errors.username}\n                        disabled={isDisabled}\n                    />\n                    <TextField\n                        id=\"address\"\n                        name=\"address\"\n                        label=\"Address\"\n                        variant=\"outlined\"\n                        value={formik.values.address}\n                        onChange={formik.handleChange}\n                        error={formik.touched.address && Boolean(formik.errors.address)}\n                        helperText={formik.errors.address}\n                        disabled={isDisabled}\n                    />\n                    <TextField\n                        id=\"birthday\"\n                        name=\"birthday\"\n                        label=\"Birthday\"\n                        variant=\"outlined\"\n                        value={formik.values.birthday}\n                        onChange={formik.handleChange}\n                        error={formik.touched.birthday && Boolean(formik.errors.birthday)}\n                        helperText={formik.errors.birthday}\n                        disabled={isDisabled}\n                    />\n                </Box>\n                    <div>\n                        {!isDisabled && (\n                            <>\n                                <Button\n                                sx={{marginTop: '15px', marginRight: '10px'}}\n                                variant=\"outlined\"\n                                type=\"submit\"\n                                disabled={!formik.isValid}\n                            >\n                                Save\n                            </Button>\n                            <Button\n                                sx={{marginTop: '15px', marginRight: '10px'}}\n                                variant=\"contained\"\n                                color=\"error\"\n                                onClick={() => deleteHandler(userProfile?.id)}\n                                disabled={!formik.values}\n                            >\n                                Delete\n                            </Button></>\n                        )}\n                    </div>\n            </form>\n        </div>\n    );\n}\n\nexport default UserProfileForm;","import React, {useContext, useEffect, useState} from 'react';\nimport ActiveUserContext from \"../../../Contexts/ActiveUserContext\";\nimport {UserProfile} from \"../../../types/models/UserProfile.model\";\nimport UserProfileService from \"../../../Services/UserProfileService\";\nimport UserProfileForm from \"../../molecules/UserProfileForm/UserProfileForm\";\n\nfunction UserProfilePage() {\n    const {user} = useContext(ActiveUserContext);\n    const [currentUserProfile, setCurrentUserProfile] = useState<UserProfile>();\n\n    useEffect(() => {\n        return (() => {\n                if (user !== undefined && user !== null && user.userProfile !== null && typeof user.userProfile.id === \"string\") {\n                    UserProfileService.getUserProfile(user.userProfile.id)\n                        .then((userProfile : UserProfile) => {\n                            setCurrentUserProfile(userProfile)\n                            console.log(userProfile);\n                        })\n                }\n                console.log(\"Get User with Context\" ,user)\n        })\n    }, []);\n\n\n\n\n    return (\n        <div>\n            <UserProfileForm userProfile={currentUserProfile} isDisabled={false}/>\n        </div>\n    );\n\n}\n\nexport default UserProfilePage;","import React, {createContext, useState} from \"react\";\nimport {Page} from \"../types/models/Page.model\";\nimport {UserProfile} from \"../types/models/UserProfile.model\";\n\nexport type UserProfileOverviewContextState = {\n    sort: string;\n    setSort: (filter: string) => void;\n    currentPage: number;\n    setCurrentPage: (page: number) => void;\n    pageInfo: Page<UserProfile>;\n    setPageInfo: (pageInfo: Page<UserProfile>) => void;\n};\n\nconst contextDefaultValues: UserProfileOverviewContextState = {\n\n    sort: \"\",\n    setSort: () => {\n    },\n    currentPage: 1,\n    setCurrentPage: () => {\n    },\n    setPageInfo: () => {\n    },\n    pageInfo: {\n        totalPages: 0,\n        totalElements: 0,\n        pageable: {\n            pageNumber: 0,\n            pageSize: 10,\n            sort: {\n                sorted: false,\n                unsorted: false,\n                empty: true\n            },\n            offset: 0,\n            paged: false,\n            unpaged: false\n        },\n        size: 0,\n        content: [],\n        number: 0,\n        sort: {\n            sorted: false,\n            unsorted: false,\n            empty: true\n        },\n        numberOfElements: 0,\n        first: false,\n        last: false,\n        empty: true\n\n    },\n};\n\nexport const UserProfileOverviewContext =\n    createContext<UserProfileOverviewContextState>(contextDefaultValues);\n\nconst UserProfileOverviewContextProvider = ({children}:{children:React.ReactNode}) => {\n\n    const [currentPage, setCurrentPage] = useState<number>(1);\n    const [sort, setSort] = useState<string>(\"\");\n\n    const [pageInfo, setPageInfo] = useState<Page<UserProfile>>({\n        totalPages: 0,\n        totalElements: 0,\n        pageable: {\n            pageNumber: 0,\n            pageSize: 10,\n            sort: {\n                sorted: false,\n                unsorted: false,\n                empty: true\n            },\n            offset: 0,\n            paged: false,\n            unpaged: false\n        },\n        size: 0,\n        content: [],\n        number: 0,\n        sort: {\n            sorted: false,\n            unsorted: false,\n            empty: true\n        },\n        numberOfElements: 0,\n        first: false,\n        last: false,\n        empty: true\n\n    });\n\n    // Mit Luca besprochen\n    return <UserProfileOverviewContext.Provider value={{\n        sort,\n        setSort,\n        currentPage,\n        setCurrentPage,\n        pageInfo,\n        setPageInfo,\n    }}>\n        {children}\n    </UserProfileOverviewContext.Provider>\n}\n\nexport default UserProfileOverviewContextProvider;","import {useContext} from \"react\";\nimport {UserProfileOverviewContext} from \"../../../Contexts/UserProfileOverviewContext\";\nimport {Pagination} from \"@mui/material\";\n\nfunction PaginationBar() {\n\n    const {\n        currentPage,\n        setCurrentPage,\n        pageInfo,\n    } = useContext(UserProfileOverviewContext);\n\n    return (\n            <Pagination\n                count={pageInfo.totalPages}\n                color=\"primary\"\n                page={currentPage}\n                onChange={(event, page) => setCurrentPage(page)}\n            />\n    )\n}\n\nexport default PaginationBar;\n","import React, {useContext, useEffect} from 'react';\nimport UserProfileService from \"../../../Services/UserProfileService\";\nimport {UserProfileOverviewContext} from \"../../../Contexts/UserProfileOverviewContext\";\nimport UserProfileForm from \"../../molecules/UserProfileForm/UserProfileForm\";\n\nfunction Overview() {\n\n    const {sort, currentPage, setPageInfo, pageInfo} = useContext(UserProfileOverviewContext);\n\n    useEffect(() => {\n        UserProfileService.getAllUserProfiles(currentPage - 1, pageInfo.pageable.pageSize, sort).then((value) => {\n            setPageInfo({...value});\n        })\n    }, [setPageInfo, currentPage, sort, pageInfo.pageable.pageSize]);\n\n\n    return (\n        <div data-cy=\"people-list-item\">\n            {pageInfo.content.map((userProfile) => (<UserProfileForm key={userProfile.username} userProfile={userProfile} isDisabled={true} />))}\n        </div>\n\n    );\n}\n\nexport default Overview;","import {useContext, useEffect, useState} from \"react\";\nimport {UserProfileOverviewContext} from \"../../../Contexts/UserProfileOverviewContext\";\nimport {MenuItem, Select} from \"@mui/material\";\n\nfunction UserProfileSort() {\n\n    const {setSort} = useContext(UserProfileOverviewContext);\n\n    const [selectedValue, setSelectedValue] = useState(\"username_asc\");\n\n\n    useEffect(() => {\n        setSort(selectedValue);\n    }, [setSort ,selectedValue]);\n\n\n    return (\n        <Select\n            labelId=\"sort\"\n            data-cy=\"sort-dropdown\"\n            id=\"sort\"\n            value={selectedValue}\n            label=\"Sort\"\n            onChange={(value) => setSelectedValue(value.target.value)}\n        >\n            <MenuItem value={\"address_desc\"}>Address A-Z</MenuItem>\n            <MenuItem value={\"address_asc\"}>Address Z-A</MenuItem>\n            <MenuItem value={\"birthday_desc\"}>Birthday Z-A</MenuItem>\n            <MenuItem value={\"birthday_asc\"}>Birthday A-Z</MenuItem>\n            <MenuItem value={\"username_asc\"}>Username A-Z</MenuItem>\n            <MenuItem value={\"username_desc\"}>Username Z-A</MenuItem>\n        </Select>\n    )\n}\n\nexport default UserProfileSort;\n","import UserProfileOverviewContextProvider from \"../../../Contexts/UserProfileOverviewContext\";\nimport PaginationBar from \"../../molecules/PaginationBar/PaginationBar\";\nimport Overview from \"../../organisms/Overview/Overview\";\nimport UserProfileSort from \"../../molecules/UserProfileSort/UserProfileSort\";\n\nfunction Homepage() {\n\n    return (\n        <UserProfileOverviewContextProvider>\n            <UserProfileSort></UserProfileSort>\n            <Overview></Overview>\n            <PaginationBar/>\n        </UserProfileOverviewContextProvider>\n\n    )\n}\n\nexport default Homepage;\n","import { Route, Routes } from 'react-router-dom';\nimport LoginPage from '../components/pages/LoginPage/LoginPage';\nimport PrivateRoute from './PrivateRoute';\nimport HomePage from '../components/pages/HomePage';\nimport UserTable from '../components/pages/UserPage/UserTable';\nimport UserPage from '../components/pages/UserPage/UserPage';\nimport authorities from '../config/Authorities';\nimport UserProfilePage from \"../components/pages/UserProfilePage/UserProfilePage\";\nimport UserProfileOverviewPage from \"../components/pages/UserProfilePage/UserProfileOverviewPage\";\n\n/**\n * Router component renders a route switch with all available pages\n */\n\nconst Router = () => {\n\n  /** navigate to different \"home\"-locations depending on Role the user have */\n\n  return (\n    <Routes>\n      <Route path={'/'} element={<HomePage />} />\n      <Route path={'/login'} element={<LoginPage />} />\n\n        <Route path={'/userprofile/me'} element={<PrivateRoute requiredAuths={[]} element={<UserProfilePage/>}/>} />\n        <Route path={'/userprofile/all'} element={<PrivateRoute requiredAuths={[authorities.USER_MODIFY]} element={<UserProfileOverviewPage/>}/>} />\n\n      <Route\n        path={'/users'}\n        element={<PrivateRoute requiredAuths={[]} element={<UserTable />} />}\n      />\n      <Route\n        path='/useredit'\n        element={\n          <PrivateRoute\n            requiredAuths={[authorities.USER_DEACTIVATE, authorities.USER_CREATE]}\n            element={<UserPage />}\n          ></PrivateRoute>\n        }\n      />\n      <Route\n        path='/useredit/:userId'\n        element={\n          <PrivateRoute\n            requiredAuths={[authorities.USER_READ]}\n            element={<UserPage />}\n          ></PrivateRoute>\n        }\n      />\n\n      <Route path='*' element={<div>Not Found</div>} />\n    </Routes>\n  );\n};\n\nexport default Router;\n","import React from 'react';\n\nimport { ActiveUserContextProvider } from './Contexts/ActiveUserContext';\nimport Router from './Router/Router';\n\nfunction App() {\n  return (\n    <ActiveUserContextProvider>\n      <Router />\n    </ActiveUserContextProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}